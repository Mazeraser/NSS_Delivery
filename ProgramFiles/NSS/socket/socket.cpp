/*#include <iostream>
#include <winsock2.h> // Основной заголовок для WinSock
#include <ws2tcpip.h> // Для дополнительных функций сокетов (например, getaddrinfo)

#pragma comment(lib, "Ws2_32.lib") // Подключение библиотеки WinSock

#define PORT 8080 // Указываем порт

int main() {
    WSADATA wsaData;

    // Инициализация WinSock
    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {
        std::cerr << "Ошибка инициализации WinSock" << std::endl;
        return 1;
    }

    int server_fd;
    SOCKET new_socket;
    struct sockaddr_in address;
    int opt = 1;
    int addrlen = sizeof(address);

    // Создание сокета
    server_fd = socket(AF_INET, SOCK_STREAM, 0);
    if (server_fd == INVALID_SOCKET) {
        std::cerr << "Ошибка создания сокета: " << WSAGetLastError() << std::endl;
        WSACleanup();
        return 1;
    }

    // Настройка сокета (SO_REUSEADDR для повторного использования адреса)
    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR, (char*)&opt, sizeof(opt)) == SOCKET_ERROR) {
        std::cerr << "Ошибка установки параметров сокета: " << WSAGetLastError() << std::endl;
        closesocket(server_fd);
        WSACleanup();
        return 1;
    }

    // Настройка адреса сервера
    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;  // Привязка ко всем интерфейсам
    address.sin_port = htons(PORT);        // Преобразование порта в сетевой порядок байт

    // Привязка сокета к адресу
    if (bind(server_fd, (struct sockaddr*)&address, sizeof(address)) == SOCKET_ERROR) {
        std::cerr << "Ошибка привязки сокета: " << WSAGetLastError() << std::endl;
        closesocket(server_fd);
        WSACleanup();
        return 1;
    }

    // Прослушивание входящих соединений
    if (listen(server_fd, 3) == SOCKET_ERROR) {
        std::cerr << "Ошибка прослушивания: " << WSAGetLastError() << std::endl;
        closesocket(server_fd);
        WSACleanup();
        return 1;
    }

    std::cout << "Ожидание подключения..." << std::endl;

    // Принятие нового подключения
    new_socket = accept(server_fd, (struct sockaddr*)&address, &addrlen);
    if (new_socket == INVALID_SOCKET) {
        std::cerr << "Ошибка принятия подключения: " << WSAGetLastError() << std::endl;
        closesocket(server_fd);
        WSACleanup();
        return 1;
    }

    std::cout << "Клиент подключен!" << std::endl;

    // Закрытие сокетов после завершения работы
    closesocket(new_socket);
    closesocket(server_fd);

    // Очистка WinSock
    WSACleanup();

    return 0;
}
*/